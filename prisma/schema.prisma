generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  fullName     String        @map("name")
  email        String        @unique
  password     String
  isVerified   Boolean       @default(false)
  role         UserRole      @default(user)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  images       Image[]
  testimonials Testimonial[]
  attendances  Attendance[]
  enrollments  Enrollment[]
  userDetail   UserDetail?   @relation("UserDetailRelation")
  userDetailId String?       @unique
}

model UserDetail {
  id                String  @id @default(cuid())
  phoneNumber       String?
  address           String?
  motherName        String?
  fatherName        String?
  parentContact     String?
  schoolCollegeName String?
  user              User    @relation("UserDetailRelation", fields: [userId], references: [id])
  userId            String  @unique
}

model Image {
  id        String @id @default(cuid())
  public_id String
  imgSrc    String
  user      User   @relation(fields: [userId], references: [id])
  userId    String
}

model Testimonial {
  id        String   @id @default(cuid())
  content   String
  rating    Int      @default(0)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Attendance {
  id        String           @id @default(cuid())
  date      DateTime
  status    AttendanceStatus @default(PRESENT)
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  course    Course           @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Course {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        CourseType
  startDate   DateTime
  endDate     DateTime?
  enrollments Enrollment[]
  attendances Attendance[]
}

model Enrollment {
  id            String           @id @default(cuid())
  course        Course           @relation(fields: [courseId], references: [id])
  courseId      String
  student       User             @relation(fields: [userId], references: [id])
  userId        String
  enrolledAt    DateTime         @default(now())
  status        EnrollmentStatus @default(PENDING)
  paymentStatus PaymentStatus    @default(PENDING)
}

enum UserRole {
  admin
  user
}

enum CourseType {
  SCIENCE
  MANAGEMENT
  LANGUAGE
  STAFF_NURSE
  HA
  LAB_PREPARATION
  COMPUTER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

enum EnrollmentStatus {
  PENDING
  VERIFIED
  FAILED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
